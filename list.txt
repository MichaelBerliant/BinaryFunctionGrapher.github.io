S[;;] (This is a summation function, where the first parameter is the number of summations,
the second is the initial value of j,
and the third is the expression you want to sum which uses j.
If there is a summation function nested in the third parameter, it will not be able to use the j of the outer summation function it is nested in.
Do not use any square brackets in here other than for S[;;], as it will not work)

E (e)
PI (pi)

abs() (absolute value)
acos() (arccos())
acosh() (arccosh())
asin() (arcsin())
asinh() (arcsinh())
atan() (arctan() -pi/2 rad to pi/2 rad)
atan2() (arctan() -pi rad to pi rad)
atanh() (arctanh())
cbrt() (cube root)
ceil() (ceiling division)
clz32() (number of leading zero bits in the 32-bit binary representation of a number)
cos() (cos())
cosh() (cosh())
exp() (e^())
expm1() (e^() - 1)
floor() (floor division)
fround() (nearest 32-bit single precision float representation of a number)
hypot() (square root of the sum of squares of its arguments)
imul() (32-bit multiplication of the two parameters)
log() (ln())
log10() (log())
log1p() (ln(1 + ()))
log2() (log_2())
max() (the largest of the numbers given as input parameters)
min() (the smallest of the numbers given as input parameters)
pow() (the value of a base raised to a power)
random() (random number between 0 and 1 inclusive)
round() (rounds to nearest integer)
sign() (-1 if number is negative, 1 is the number is positive)
sin() (sin())
sinh() (sinh())
sqrt() (square root)
tan() (tan())
tanh() (tanh())
trunc() (the integer part of a number)

+ (+)
- (-)
* (multiply)
** (exponent)
/ (divide)
% (remainder operator)

These will return 1 if they meet the condition, and 0 if not
== (=)
!= (not =)
> (more than)
< (less than)
>= (more than or =)
<= (less than or =)

() (brackets)
[] (brackets)

​​& (bitwise AND operator)
| (bitwise OR operator)
^ (bitwise XOR operator)
~ (bitwise NOT operator)
<< (shifts binary representation of number leftwards by number of places)
>> (shifts binary representation of number rightwards by number of places)
>>> (shifts binary representation of number rightwards by number of places without caring about the sign of the number)
